#!/bin/bash


#lamp
alias a2='sudo service apache2'
alias vhosts='sudo mc /etc/apache2/'
alias debug="export XDEBUG_SESSION_START=1;export XDEBUG_CONFIG='idekey=PHPSTORM remote_host=localhost';export SERVER_PORT=80;export SERVER_NAME=localhost;export REQUEST_URI=localhost"
alias undebug="unset XDEBUG_SESSION_START;unset XDEBUG_CONFIG;unset SERVER_PORT;unset SERVER_NAME;unset REQUEST_URI"

#symfony common (1, 2)
function sf-ver {
  if [ -f ./symfony ]
  then
      echo 1
  elif [ -f ./app/console ]
  then
      echo 2
  else
      echo 0
  fi
}

function s {
  if [ "$(sf-ver)" = '1' ]
  then
      ./symfony $*
  elif [ "$(sf-ver)" = '2' ]
  then
      ./app/console $*
  else
     echo "No symfony project found"
  fi
}


#symfony 1
alias 1.migrate='s doctrine:migrate'
alias 1.migrate.all='s doctrine:migrate && s doctrine:migrate --env=test'
alias 1.migrate.diff='s doctrine:generate-migrations-diff'
alias 1.migrate.empty='s doctrine:generate-migration'
alias 1.migrate.setversion='s doctrine:migration-version-set'
alias 1.build.classes='s doctrine:build --all-classes'
alias 1.data.load='s doctrine:data-load'

function 1.query {
  php symfony doctrine:dql "$1" $2
}

function 1.build.all {
  s doctrine:build --all
  1.migrate.setversion
}

function 1.build.database {
  s doctrine:drop-db --no-confirmation $*
  s doctrine:build-db $*
  s doctrine:insert-sql $*
  1.migrate.setversion $*
  cp data/bible_orig.sqlite data/bible.sqlite
  echo "Restored bible database from data/bible_orig.sqlite"
}

function 1.build.load {
  1.build.database $*
  1.data.load "data/local/fixtures.yml"
  1.data.load "data/fixtures/" --append
}

#symfony 2
alias 2.gen.bundle='s generate:bundle'
alias 2.gen.entity='s doctrine:generate:entity'
alias 2.gen.crud='s doctrine:generate:crud'
alias 2.fixtures.load='s doctrine:fixtures:load'
alias 2.schema.dump='s doctrine:schema:update --dump-sql'
alias 2.schema.update='s doctrine:schema:update --force'

#2.query "select a from BGridBundle:Price\\Item a"
function 2.query {
  ./app/console doctrine:query:dql "$*" --hydrate="array"
}

#terminal
alias tarf='tar -cvzf'
alias untarf='tar -zxvf'
alias untar='tar -zxvf'
alias la='ls -alh --color=auto'
alias ll='ls -lh --color=auto'
alias cdln='cd -P'
alias ..='cd ..'
alias ...='cd ../..'
alias ....='cd ../../..'
alias .....='cd ../../../..'
function take {
  mkdir $1
  cd $1
}

alias ea='nano ~/bin/dotfiles/bash/aliases && reload'
alias ee='nano ~/bin/dotfiles/bash/env'
alias ec='nano ~/bin/dotfiles/bash/config && reload'

alias h='history'
alias reload='source ~/bin/dotfiles/bash/aliases'

#git
function g.br {
  br=`git branch | grep "*"`
  echo ${br/* /}
}

function selenium.start {
  status selenium | grep "running" > /dev/null

  if [ $? == 0 ]; then
    echo 'selenium is running'
  else
    echo 'starting selenium'
    start selenium&
  fi

}

function g.pff {
  out=`g.p`
  if [$? == 0]; then
    echo "Push failed: $out"
  else
    echo "Pushed successfully"
  fi
}

alias ga='git add -A .'
alias g='git status'
function gg {
  git commit -e -m "`cat ~/dev/issue` $*"
}
alias gga='git commit --amend'
alias gd='git diff'
alias gdc='git diff --cached'

alias g.c='git checkout'
alias g.cc='git checkout .'
alias g.r='git reset'
alias g.rb='git rebase'
alias g.f='git fetch'
alias g.p='git push'
alias g.a='git add'
alias g.cp='git cherry-pick'
alias g.cl='git clean -f'
alias g.m='git merge'
alias g.s='git stash'
alias g.sp='git stash pop'
alias g.l='git log'
alias g.b='git branch'
alias xclip.clip='xclip -sel clip'
function g.ff {
  b=`g.obr`
  c="git rebase $b"
  echo "Executing $c"
  $c
}

function g.obr {
  l=`g.br`
  r=`git config branch.$l.remote`
  echo "$r/$l"
}

function g.oh {
  branch=`g.br`
  origin_branch=`g.obr`
  branch_head=`git log $branch -n 1 --pretty=format:%H`
  origin_branch_head=`git log $origin_branch -n 1 --pretty=format:%H`
  #branch head and origin branch head should be the same
  if [ $branch_head == $origin_branch_head ]
  then
      echo $origin_branch_head | xclip -sel clip
      echo $origin_branch_head
  else
      echo "Local branch head ($branch_head) does not match origin branch head ($origin_branch_head). Did you forget to push?"
  fi
}


# d.da select m,i from LTDeliveryBundle:Menu m left join m.items i
# d.da select m,i from LTDeliveryBundle:Menu m join m.items i

alias print='rdesktop  -g 1300x800 -u d.zayankouski -d RICHBRAINS -p 123456789 -r disk:home=/home/dziamid -r clipboard:CLIPBOARD -r sound:off 10.10.1.9'

#pg_dump -h localhost -U postgres -W beta_wizard > dump-corp.sql
#psql -f data/local/dump-corp.sql wizard -U postgres -W -h localhost

function behat {
  selenium.start
  bin/behat --tags '~@bootstrap' $*
}

function behat.append-snippets {
  bin/behat --dry-run --append-snippets $*
}

function behat.bootstrap {
  bin/behat features/upgrades.feature --tags "bootstrap&&$1"
}

function cpv {
#copy visible files from $1 to $2
  command="rsync -a --exclude='.*' $1/ $2"
  echo "executing $command"
  $command
}

function freeze {
  br=`g.br`
  source=`pwd`
  destination="$source-$br"
  command="cpv $source $destination"
  echo "executing $command"
  $command
}

function task() {
  dir=`pwd`
  issue=`/usr/bin/php ~/dev/issue.php`
  echo $issue
}

function untask() {
  dir=`pwd`
  echo "" > ~/dev/issue
  echo "Cleaned up active issue"
}

function vtask() {
  cat ~/dev/issue
}

#removes git conflict markers from give file
function g.both() {
  filename=$1
  tempfilename="temp_file_used_by_git_both"
  grep -v "<<<<<<<\|>>>>>>>\|=======" $filename > $tempfilename; mv $tempfilename $filename;

}

function 1.schema () {
  1.migrate.diff
  1.migrate
  1.build.classes
}
